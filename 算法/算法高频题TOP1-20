### 算法高频题

#### TOP1-20



**按照序号排序，考察频率从高到低**



#### 1、反转链表

[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/)

给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220727101710952.png" alt="image-20220727101710952" style="zoom:67%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220727101731603.png" alt="image-20220727101731603" style="zoom:67%;" />

```c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *		int val;
 *		ListNode *next;
 *		ListNode() : val(0), next(nullptr) {}
 *		ListNode(int x) : val(x), next(nullptr) {}
 *		ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solutio {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* dummy = nullptr;
        ListNode* pre = head;
        while (pre != nullptr) {
            ListNode* cur = pre->next;
            pre->next = dummy;
            dummy = pre;
            pre = cur;
        }
        return dummy;
    }
};
```

#### 2、快速排序

[912. 排序数组](https://leetcode.cn/problems/sort-an-array/)

给你一个整数数组 `nums`，请你将该数组升序排列。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728171132947.png" alt="image-20220728171132947" style="zoom:80%;" />

```C++
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums, 0, nums.size() - 1);
        return nums;    
    }
    void quickSort(vector<int>& nums, int low, int high) {
        if (low >= high) return;
        int x = rand() % (high - low + 1) + low;
        swap(nums[x], nums[low]);

        int key = nums[low];
        int left = low, right = high;
        while (low < high) {
            while (low < high && nums[high] >= key) {
                high--;
            }
            nums[low] = nums[high];
            while (low < high && nums[low] <= key) {
                low++;
            }
            nums[high] = nums[low];
        }
        nums[low] = key;
        quickSort(nums, left, low - 1);
        quickSort(nums, low + 1, right);
    }
};
```



#### 3、无重复字符的最长子串

[3. 无重复字符的最长子串](https://leetcode.cn/problems/longest-substring-without-repeating-characters/)

给定一个字符串 `s` ，请你找出其中不含有重复字符的 **最长子串** 的长度。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220727103845548.png" alt="image-20220727103845548" style="zoom:67%;" />

**提示：**

- `0 <= s.length <= 5 * 104`
- `s` 由英文字母、数字、符号和空格组成

```C++
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> u_set;
        int right = -1;
        int maxLen = 0;
        int n = s.size();
        for (int left = 0; left < n; left++) {
       		if (left != 0) {
                u_set.erase(s[left - 1]);
            } 	
            while (right + 1 < n && !u_set.count(s[right + 1])) {
                u_set.insert(s[right + 1]);
                right++;
            }
            maxLen = max(maxLen, right - left + 1);
        }
        return maxLen;
    }
};
```

#### 4、LRU 缓存

[146. LRU 缓存](https://leetcode.cn/problems/lru-cache/)

请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。
实现 LRUCache 类：

1. LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存
2. int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。
3. void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。
4. 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。

![image-20220727110649510](C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220727110649510.png)

```C++
struct DoubleList {
    int key, val;
    DoubleList* pre, *next;
    DoubleList(int _key, int _val) : pre(nullptr), next(nullptr), key(_key), val(_val) {}
};
class LRUCache {
public:
    LRUCache(int _capacity) {
        this->capacity = _capacity;
        head = new DoubleList(-1, -1);
        tail = new DoubleList(-1, -1);
        head->next = tail;
        tail->pre = head;
    }
    ~LRUCache() {
        if (head) {
            delete head;
            head = nullptr;
        }
        if (tail) {
            delete tail;
            tail = nullptr;
        }
        for (auto& a : mp) {
            if (a.second) {
                delete a.second;
                a.second = nullptr;
            }
        }
    }
    
    int get(int _key) {
        if (mp.find(_key) != mp.end()) {
            DoubleList* node = mp[_key];
            remove(node);
            insert(node);
            return node->val;
        }
        return -1;
    }
    
    void put(int _key, int _val) {
        if (!mp.count(_key)) {
            if (mp.size() == capacity) {
                DoubleList* ptr = tail->pre;
                mp.erase(ptr->key);
                remove(ptr);
            }
            DoubleList* ptr = new DoubleList(_key, _val);
            mp[ptr->key] = ptr;
            insert(ptr);
            return ;
        }
        DoubleList* node = mp[_key];
        node->val = _val;
        remove(node);
        insert(node); 

    }

    void remove(DoubleList* node) {
        DoubleList* a = node->pre;
        DoubleList* b = node->next;
        a->next = b;
        b->pre = a;
    }

    void insert(DoubleList* node) {
        DoubleList* a = head->next;
        a->pre = node;
        node->next = a;
        node->pre = head;
        head->next = node;
    }
private:
    DoubleList* head, *tail;
    int capacity;
    unordered_map<int, DoubleList*> mp;
};
```

#### 5、数组中的第K个最大元素

[215. 数组中的第K个最大元素](https://leetcode.cn/problems/kth-largest-element-in-an-array/)

给定整数数组 `nums` 和整数 `k`，请返回数组中第 `k` 个最大的元素。

请注意，你需要找的是数组排序后的第 `k` 个最大的元素，而不是第 `k` 个不同的元素。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728160353933.png" alt="image-20220728160353933" style="zoom:80%;" />

```C++
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        return quickSort(nums, 0, nums.size() - 1, k);    
    }
    int quickSort(vector<int>& nums, int low, int high, int k) {
        int left = low;
        int right = high;
        int key = nums[low];

        while (low < high) {
            while (low < high && nums[high] <= key) {
                high--;
            }
            nums[low] = nums[high];
            while (low < high && nums[low] >= key) {
                low++;
            }
            nums[high] = nums[low];
        }
        nums[low] = key;
        if (low == k - 1) {
            return nums[low];
        } else if (low > k - 1) {
            return quickSort(nums, left, low - 1, k);
        } else {
            return quickSort(nums, low + 1, right, k);
        }
    }
    
};
```



#### 6、k个一组翻转链表

[25. K 个一组翻转链表](https://leetcode.cn/problems/reverse-nodes-in-k-group/)

给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。

k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728165107186.png" alt="image-20220728165107186" style="zoom:80%;" />

```C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* tail = head;
        for (int i = 0; i < k; i++) {
            if (tail == nullptr) {
                return head;
            }
            tail = tail->next;
        }

        ListNode* pre = nullptr;
        ListNode* cur = head;
        while (cur != tail) {
            ListNode* tmp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = tmp;
        }
        head->next = reverseKGroup(tail, k);
        return pre;
    }
};
```

#### 7、三数之和

[15. 三数之和](https://leetcode.cn/problems/3sum/)

给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。

注意：答案中不可以包含重复的三元组。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728165211537.png" alt="image-20220728165211537" style="zoom:80%;" />

```C++
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> res;
        sort (nums.begin(), nums.end());
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) return res;
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int left = i + 1, right = n - 1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum > 0) {
                    right--;
                } else if (sum < 0) {
                    left++;
                } else {
                    res.emplace_back(vector<int> {nums[i], nums[left], nums[right]});
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    while (left < right && nums[right] == nums[right - 1]) right--;
                    left++;
                    right--;
                }
            }
        }
        return res;
    }
};
```

#### 8、最大子数组和

[53. 最大子数组和](https://leetcode.cn/problems/maximum-subarray/)

给你一个整数数组 `nums` ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

**子数组** 是数组中的一个连续部分。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728171651714.png" alt="image-20220728171651714" style="zoom:80%;" />

```c++
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        long long sum = 0;
        long long res = INT_MIN;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            res = max(res, sum);
            if (sum < 0) sum = 0;
        }
        return res;
    }
};
```

#### 9、合并两个有序链表

[21. 合并两个有序链表](https://leetcode.cn/problems/merge-two-sorted-lists/)

将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728172850660.png" alt="image-20220728172850660" style="zoom:80%;" />

```C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* l3 = dummy;

        while (l1 && l2) {
            if (l1->val < l2->val) {
                l3->next = l1;
                l1 = l1->next;
            } else {
                l3->next = l2;
                l2 = l2->next;
            }
            l3 = l3->next;
        }    
        if (l1) {
            l3->next = l1;
        }
        if (l2) {
            l3->next = l2;
        }

        ListNode* res = dummy->next;
        delete dummy;
        return res;
    }
};
```

#### 10、两数之和

[1. 两数之和](https://leetcode.cn/problems/two-sum/)

给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728215632984.png" alt="image-20220728215632984" style="zoom:80%;" />

```C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            int res = target - nums[i];
            if (mp.find(res) != mp.end()) {
                return vector<int> {i, mp[res]};
            }
            mp[nums[i]] = i;
        }
        return {};
    }
};
```

#### 11、二叉树的层序遍历

[102. 二叉树的层序遍历](https://leetcode.cn/problems/binary-tree-level-order-traversal/)

给你二叉树的根节点 `root` ，返回其节点值的 **层序遍历** 。 （即逐层地，从左到右访问所有节点）。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728222626193.png" alt="image-20220728222626193" style="zoom:80%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728222639536.png" alt="image-20220728222639536" style="zoom:80%;" />

```C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        vector<vector<int>> res;
        if (root != nullptr) {
            que.push(root);
        }

        while (!que.empty()) {
            int size = que.size();
            vector<int> tmp;
            for (int i = 0; i < size; i++) {
                TreeNode* node = que.front();
                que.pop();
                tmp.push_back(node->val);
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
            res.push_back(tmp);
        }
        return res;
    }
};
```

#### 12、环形链表

[141. 环形链表](https://leetcode.cn/problems/linked-list-cycle/)

给你一个链表的头节点 head ，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。

如果链表中存在环 ，则返回 true 。 否则，返回 false 。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728232630001.png" alt="image-20220728232630001" style="zoom:80%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728232655404.png" alt="image-20220728232655404" style="zoom:80%;" />

```C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (head == nullptr) return false;
        ListNode* fast = head;
        ListNode* slow = head;

        while (fast->next != nullptr && fast->next->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) {
                return true;
            }
        }        
        return false;
    }
};
```

#### 13、买卖股票的最佳时机

[121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/)

给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220728233751822.png" alt="image-20220728233751822" style="zoom:80%;" />

```C++
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int low = INT_MAX;
        int res = 0;
        for (int i = 0; i < prices.size(); i++) {
            low = min(low, prices[i]);
            res = max(res, prices[i] - low);
        }
        return res;
    }
};
```

#### 14、二叉树的锯齿形层序遍历

[103. 二叉树的锯齿形层序遍历](https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/)

给你二叉树的根节点 `root` ，返回其节点值的 **锯齿形层序遍历** 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729000037644.png" alt="image-20220729000037644" style="zoom:80%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729000052388.png" alt="image-20220729000052388" style="zoom:80%;" />

```c++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        if (root != nullptr) que.push(root);
        bool flag = true;
        vector<vector<int>> res;
        while (!que.empty()) {
            int size = que.size();
            flag = !flag;
            vector<int> tmp;
            for (int i = 0; i < size; i++) {
                TreeNode* node = que.front();
                que.pop();
                tmp.push_back(node->val);
                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
            if (flag) {
                reverse(tmp.begin(), tmp.end());
            }
            res.push_back(tmp);
        }           
        return res;
    }
};
```

#### 15、有效的括号

[20. 有效的括号](https://leetcode.cn/problems/valid-parentheses/)

给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串 `s` ，判断字符串是否有效。

有效字符串需满足：

1. 左括号必须用相同类型的右括号闭合。
2. 左括号必须以正确的顺序闭合。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729000853909.png" alt="image-20220729000853909" style="zoom:80%;" />

```C++
class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') st.push(')');
            else if (s[i] == '{') st.push('}');
            else if (s[i] == '[') st.push(']');
            else if (st.empty() || st.top() != s[i]) {
                return false;
            }
            else st.pop();
        }
        return st.empty();
    }
};
```

#### 16、最长回文子串

[5. 最长回文子串](https://leetcode.cn/problems/longest-palindromic-substring/)

给你一个字符串 `s`，找到 `s` 中最长的回文子串。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729100333877.png" alt="image-20220729100333877" style="zoom:80%;" />

```C++
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int begin = 0, end = 0, maxLen = 0;
        for (int i = 0; i < n; i++) {
            int l1 = getStrLen(s, i, i);
            int l2 = getStrLen(s, i, i + 1);
            maxLen = max(maxLen, max(l1, l2));
            if (maxLen > end - begin + 1) {
                begin = i - (maxLen - 1) / 2;
                end = i + maxLen / 2;
            }
        }
        return s.substr(begin, maxLen);
    }
    int getStrLen(string& s, int left, int right) {
        int l = left;
        int r = right;
        while (l >= 0 && r < s.size() && s[l] == s[r]) {
            l--;
            r++;
        }
        return r - l - 1;
    }
};
```

17、合并两个有序数组

[88. 合并两个有序数组](https://leetcode.cn/problems/merge-sorted-array/)	

给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。

请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。

注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729102905156.png" alt="image-20220729102905156" style="zoom:80%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729102847859.png" alt="image-20220729102847859" style="zoom:80%;" />

```C++
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int pos = m-- + n-- - 1;
        while (m >= 0 && n >= 0) {
            nums1[pos--] = nums1[m] > nums2[n] ? nums1[m--] : nums2[n--];
        }
        while (n >= 0) {
            nums1[pos--] = nums2[n--];
        }
    }
};
```

#### 18、搜索旋转排序数组

[33. 搜索旋转排序数组](https://leetcode.cn/problems/search-in-rotated-sorted-array/)

整数数组 nums 按升序排列，数组中的值 互不相同 。

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729103432301.png" alt="image-20220729103432301" style="zoom:80%;" />

```C++
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (nums[mid] > nums[0]) l = mid;
            else r = mid - 1;
        }

        if (target >= nums[0]) l = 0;
        else {
            l++;
            r = nums.size() - 1;
        }

        while (l <= r) {
            int mid = (l + r) >> 1;
            if (target == nums[mid]) {
                return mid;
            } else if (target < nums[mid]) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return -1;
    }
};
```

#### 19、岛屿数量

[200. 岛屿数量](https://leetcode.cn/problems/number-of-islands/)

给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729113122037.png" alt="image-20220729113122037" style="zoom:80%;" />

```C++
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        m = grid.size();
        n = grid[0].size();
        int ret = 0;
        res.assign(m, vector<bool> (n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!res[i][j] && grid[i][j] == '1') {
                    ret++;
                    dfs(grid, i, j);
                }
            }
        }
        return ret;
    }
    void dfs(vector<vector<char>>& grid, int i, int j) {
        res[i][j] = true;
        for (int k = 0; k < 4; k++) {
            int r = i + dr[k];
            int c = j + dc[k];
            if (r < 0 || r >= m || c < 0 || c >= n || res[r][c] || grid[r][c] == '0') {
                continue;
            }
            dfs(grid, r, c);
        }
    }
private:
    int m, n;
    const static inline int dr[4] = {0, -1, 0, 1};
    const static inline int dc[4] = {-1, 0, 1, 0};
    vector<vector<bool>> res;
};
```

#### 20、二叉树的最近公共祖先

[236. 二叉树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/)

给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729113325668.png" alt="image-20220729113325668" style="zoom:80%;" />

<img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20220729113347501.png" alt="image-20220729113347501" style="zoom:80%;" />

```C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr || p == root || q == root) {
            return root;
        }      

        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);

        if (left == nullptr && right == nullptr) return nullptr;
        if (left == nullptr || right == nullptr) return left == nullptr ? right : left;
        
        return root;
    }
};
```

